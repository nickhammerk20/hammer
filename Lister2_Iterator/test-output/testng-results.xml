<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="7" total="470" passed="463">
  <reporter-output>
  </reporter-output>
  <suite name="Lister2_Iterator by groups" duration-ms="542" started-at="2016-07-29T14:36:36Z" finished-at="2016-07-29T14:36:37Z">
    <groups>
      <group name="init">
        <method signature="LListTestNG.test_init_0()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_0" class="test.LListTestNG"/>
        <method signature="LListTestNG.test_init_1()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_1" class="test.LListTestNG"/>
        <method signature="LListTestNG.test_init_2()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_2" class="test.LListTestNG"/>
        <method signature="LListTestNG.test_init_many()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_many" class="test.LListTestNG"/>
        <method signature="LListTestNG.test_init_null()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_null" class="test.LListTestNG"/>
        <method signature="LListTestNGParamet.test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" class="test.LListTestNGParamet"/>
      </group> <!-- init -->
      <group name="DelPos">
        <method signature="LListTestNGParamet.test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" class="test.LListTestNGParamet"/>
      </group> <!-- DelPos -->
      <group name="set">
        <method signature="LListTestNGParamet.test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" class="test.LListTestNGParamet"/>
      </group> <!-- set -->
      <group name="halfRevers">
        <method signature="LListTestNGParamet.test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" class="test.LListTestNGParamet"/>
      </group> <!-- halfRevers -->
      <group name="max">
        <method signature="LListTestNGParamet.test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" class="test.LListTestNGParamet"/>
      </group> <!-- max -->
      <group name="addPos">
        <method signature="LListTestNGParamet.test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" class="test.LListTestNGParamet"/>
      </group> <!-- addPos -->
      <group name="clear">
        <method signature="LListTestNGParamet.test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" class="test.LListTestNGParamet"/>
      </group> <!-- clear -->
      <group name="sort">
        <method signature="LListTestNGParamet.test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" class="test.LListTestNGParamet"/>
      </group> <!-- sort -->
      <group name="addStart">
        <method signature="LListTestNGParamet.test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" class="test.LListTestNGParamet"/>
      </group> <!-- addStart -->
      <group name="revers">
        <method signature="LListTestNGParamet.test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" class="test.LListTestNGParamet"/>
      </group> <!-- revers -->
      <group name="addEnd">
        <method signature="LListTestNGParamet.test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" class="test.LListTestNGParamet"/>
      </group> <!-- addEnd -->
      <group name="DelStart">
        <method signature="LListTestNGParamet.test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" class="test.LListTestNGParamet"/>
      </group> <!-- DelStart -->
      <group name="min">
        <method signature="LListTestNGParamet.test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" class="test.LListTestNGParamet"/>
      </group> <!-- min -->
      <group name="size">
        <method signature="LListTestNGParamet.test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" class="test.LListTestNGParamet"/>
      </group> <!-- size -->
      <group name="get">
        <method signature="LListTestNGParamet.test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" class="test.LListTestNGParamet"/>
      </group> <!-- get -->
      <group name="Iterator">
        <method signature="LListTestNGParamet.test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" class="test.LListTestNGParamet"/>
      </group> <!-- Iterator -->
      <group name="toArray">
        <method signature="LListTestNGParamet.test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" class="test.LListTestNGParamet"/>
      </group> <!-- toArray -->
      <group name="minPos">
        <method signature="LListTestNGParamet.test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" class="test.LListTestNGParamet"/>
      </group> <!-- minPos -->
      <group name="DelEnd">
        <method signature="LListTestNGParamet.test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" class="test.LListTestNGParamet"/>
      </group> <!-- DelEnd -->
      <group name="toString">
        <method signature="LListTestNGParamet.test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" class="test.LListTestNGParamet"/>
      </group> <!-- toString -->
      <group name="maxPos">
        <method signature="LListTestNGParamet.test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" class="test.LListTestNGParamet"/>
        <method signature="LListTestNGParamet.test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" class="test.LListTestNGParamet"/>
      </group> <!-- maxPos -->
    </groups>
    <test name="GRP-init,DelPos,set,halfRevers,max,addPos,clear,sort,addStart,revers,DelStart,addEnd,min,size,get,Iterator,toArray,minPos,DelEnd,toString,maxPos" duration-ms="542" started-at="2016-07-29T14:36:36Z" finished-at="2016-07-29T14:36:37Z">
      <class name="test.LListTestNG">
        <test-method status="PASS" signature="test_init_0()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_0" duration-ms="7" started-at="2016-07-29T17:36:36Z" finished-at="2016-07-29T17:36:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_1()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_1" duration-ms="2" started-at="2016-07-29T17:36:36Z" finished-at="2016-07-29T17:36:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_2()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" finished-at="2016-07-29T17:36:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="FAIL" signature="test_init_many()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" finished-at="2016-07-29T17:36:36Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[array lengths differed, expected.length=6 actual.length=8]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: array lengths differed, expected.length=6 actual.length=8
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.internal.junit.ComparisonCriteria.assertArraysAreSameLength(ComparisonCriteria.java:70)
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:34)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNG.test_init_many(LListTestNG.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="FAIL" signature="test_init_null()[pri:0, instance:test.LListTestNG@ea1a8d5]" name="test_init_null" duration-ms="1" started-at="2016-07-29T17:36:36Z" finished-at="2016-07-29T17:36:36Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[array lengths differed, expected.length=0 actual.length=8]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: array lengths differed, expected.length=0 actual.length=8
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.internal.junit.ComparisonCriteria.assertArraysAreSameLength(ComparisonCriteria.java:70)
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:34)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNG.test_init_null(LListTestNG.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
      </class> <!-- test.LListTestNG -->
      <class name="test.LListTestNGParamet">
        <test-method status="PASS" signature="test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_0 -->
        <test-method status="PASS" signature="test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_0 -->
        <test-method status="PASS" signature="test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_0 -->
        <test-method status="PASS" signature="test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_0 -->
        <test-method status="PASS" signature="test_AddEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_0 -->
        <test-method status="PASS" signature="test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_1 -->
        <test-method status="PASS" signature="test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_1 -->
        <test-method status="PASS" signature="test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_1 -->
        <test-method status="PASS" signature="test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_1 -->
        <test-method status="PASS" signature="test_AddEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_1 -->
        <test-method status="PASS" signature="test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_2 -->
        <test-method status="PASS" signature="test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_2 -->
        <test-method status="PASS" signature="test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_2 -->
        <test-method status="PASS" signature="test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_2 -->
        <test-method status="PASS" signature="test_AddEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_2 -->
        <test-method status="PASS" signature="test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_many -->
        <test-method status="PASS" signature="test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_many -->
        <test-method status="PASS" signature="test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_many -->
        <test-method status="PASS" signature="test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_many -->
        <test-method status="PASS" signature="test_AddEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddEnd_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddEnd_many -->
        <test-method status="PASS" signature="test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_0 -->
        <test-method status="PASS" signature="test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_0 -->
        <test-method status="PASS" signature="test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_0 -->
        <test-method status="PASS" signature="test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_0 -->
        <test-method status="PASS" signature="test_AddStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_0 -->
        <test-method status="PASS" signature="test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_1 -->
        <test-method status="PASS" signature="test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_1 -->
        <test-method status="PASS" signature="test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_1 -->
        <test-method status="PASS" signature="test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_1 -->
        <test-method status="PASS" signature="test_AddStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_1 -->
        <test-method status="PASS" signature="test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_2 -->
        <test-method status="PASS" signature="test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_2 -->
        <test-method status="PASS" signature="test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_2 -->
        <test-method status="PASS" signature="test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_2 -->
        <test-method status="PASS" signature="test_AddStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_2 -->
        <test-method status="PASS" signature="test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_many -->
        <test-method status="PASS" signature="test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_many -->
        <test-method status="PASS" signature="test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_many -->
        <test-method status="PASS" signature="test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_many -->
        <test-method status="PASS" signature="test_AddStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_AddStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99,10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_AddStart_many -->
        <test-method status="PASS" signature="test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_0 -->
        <test-method status="PASS" signature="test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_0 -->
        <test-method status="PASS" signature="test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_0 -->
        <test-method status="PASS" signature="test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_0 -->
        <test-method status="PASS" signature="test_Clear_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_0 -->
        <test-method status="PASS" signature="test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_1 -->
        <test-method status="PASS" signature="test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_1 -->
        <test-method status="PASS" signature="test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_1 -->
        <test-method status="PASS" signature="test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_1 -->
        <test-method status="PASS" signature="test_Clear_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_1 -->
        <test-method status="PASS" signature="test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_2 -->
        <test-method status="PASS" signature="test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_2 -->
        <test-method status="PASS" signature="test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_2 -->
        <test-method status="PASS" signature="test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_2 -->
        <test-method status="PASS" signature="test_Clear_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_2 -->
        <test-method status="PASS" signature="test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_many -->
        <test-method status="PASS" signature="test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_many -->
        <test-method status="PASS" signature="test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_many -->
        <test-method status="PASS" signature="test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_many -->
        <test-method status="PASS" signature="test_Clear_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_many -->
        <test-method status="PASS" signature="test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_null -->
        <test-method status="PASS" signature="test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_null -->
        <test-method status="PASS" signature="test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_null -->
        <test-method status="PASS" signature="test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_null -->
        <test-method status="PASS" signature="test_Clear_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Clear_null" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Clear_null -->
        <test-method status="PASS" signature="test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.delEnd(AList0.java:220)
	at test.LListTestNGParamet.test_DelEnd_0(LListTestNGParamet.java:890)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_0 -->
        <test-method status="PASS" signature="test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.delEnd(AList2.java:207)
	at test.LListTestNGParamet.test_DelEnd_0(LListTestNGParamet.java:890)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_0 -->
        <test-method status="PASS" signature="test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.delEnd(AList1.java:208)
	at test.LListTestNGParamet.test_DelEnd_0(LListTestNGParamet.java:890)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_0 -->
        <test-method status="PASS" signature="test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.delEnd(LList1.java:307)
	at test.LListTestNGParamet.test_DelEnd_0(LListTestNGParamet.java:890)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_0 -->
        <test-method status="PASS" signature="test_DelEnd_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.delEnd(LList2.java:247)
	at test.LListTestNGParamet.test_DelEnd_0(LListTestNGParamet.java:890)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_0 -->
        <test-method status="PASS" signature="test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" duration-ms="2" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_1 -->
        <test-method status="PASS" signature="test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_1 -->
        <test-method status="PASS" signature="test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_1 -->
        <test-method status="PASS" signature="test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_1 -->
        <test-method status="PASS" signature="test_DelEnd_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_1 -->
        <test-method status="PASS" signature="test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_2 -->
        <test-method status="PASS" signature="test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_2 -->
        <test-method status="PASS" signature="test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_2 -->
        <test-method status="PASS" signature="test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_2 -->
        <test-method status="PASS" signature="test_DelEnd_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_2 -->
        <test-method status="PASS" signature="test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_many -->
        <test-method status="PASS" signature="test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_many -->
        <test-method status="PASS" signature="test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_many -->
        <test-method status="PASS" signature="test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_many -->
        <test-method status="PASS" signature="test_DelEnd_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelEnd_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelEnd_many -->
        <test-method status="PASS" signature="test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.delPos(AList0.java:234)
	at test.LListTestNGParamet.test_DelPos_0(LListTestNGParamet.java:780)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_0 -->
        <test-method status="PASS" signature="test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.delPos(AList1.java:218)
	at test.LListTestNGParamet.test_DelPos_0(LListTestNGParamet.java:780)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_0 -->
        <test-method status="PASS" signature="test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.delPos(LList1.java:336)
	at test.LListTestNGParamet.test_DelPos_0(LListTestNGParamet.java:780)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_0 -->
        <test-method status="PASS" signature="test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.delPos(AList2.java:232)
	at test.LListTestNGParamet.test_DelPos_0(LListTestNGParamet.java:780)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_0 -->
        <test-method status="PASS" signature="test_DelPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.delPos(LList2.java:276)
	at test.LListTestNGParamet.test_DelPos_0(LListTestNGParamet.java:780)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_0 -->
        <test-method status="PASS" signature="test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_1 -->
        <test-method status="PASS" signature="test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_1 -->
        <test-method status="PASS" signature="test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_1 -->
        <test-method status="PASS" signature="test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_1 -->
        <test-method status="PASS" signature="test_DelPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_1 -->
        <test-method status="PASS" signature="test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_2 -->
        <test-method status="PASS" signature="test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_2 -->
        <test-method status="PASS" signature="test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_2 -->
        <test-method status="PASS" signature="test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_2 -->
        <test-method status="PASS" signature="test_DelPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_2 -->
        <test-method status="PASS" signature="test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.delPos(AList0.java:234)
	at test.LListTestNGParamet.test_DelPos_Expc(LListTestNGParamet.java:772)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_Expc -->
        <test-method status="PASS" signature="test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.delPos(AList1.java:218)
	at test.LListTestNGParamet.test_DelPos_Expc(LListTestNGParamet.java:772)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_Expc -->
        <test-method status="PASS" signature="test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.delPos(AList2.java:232)
	at test.LListTestNGParamet.test_DelPos_Expc(LListTestNGParamet.java:772)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_Expc -->
        <test-method status="PASS" signature="test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.delPos(LList1.java:336)
	at test.LListTestNGParamet.test_DelPos_Expc(LListTestNGParamet.java:772)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_Expc -->
        <test-method status="PASS" signature="test_DelPos_Expc(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_Expc" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.delPos(LList2.java:276)
	at test.LListTestNGParamet.test_DelPos_Expc(LListTestNGParamet.java:772)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_Expc -->
        <test-method status="PASS" signature="test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many -->
        <test-method status="PASS" signature="test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many -->
        <test-method status="PASS" signature="test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many -->
        <test-method status="PASS" signature="test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many -->
        <test-method status="PASS" signature="test_DelPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many -->
        <test-method status="PASS" signature="test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many_end -->
        <test-method status="PASS" signature="test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many_end -->
        <test-method status="PASS" signature="test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many_end -->
        <test-method status="PASS" signature="test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" duration-ms="30" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many_end -->
        <test-method status="PASS" signature="test_DelPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelPos_many_end -->
        <test-method status="PASS" signature="test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.delStart(AList0.java:206)
	at test.LListTestNGParamet.test_DelStart_0(LListTestNGParamet.java:844)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_0 -->
        <test-method status="PASS" signature="test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.delStart(AList1.java:194)
	at test.LListTestNGParamet.test_DelStart_0(LListTestNGParamet.java:844)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_0 -->
        <test-method status="PASS" signature="test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.delStart(AList2.java:197)
	at test.LListTestNGParamet.test_DelStart_0(LListTestNGParamet.java:844)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_0 -->
        <test-method status="PASS" signature="test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.delStart(LList1.java:294)
	at test.LListTestNGParamet.test_DelStart_0(LListTestNGParamet.java:844)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_0 -->
        <test-method status="PASS" signature="test_DelStart_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.delStart(LList2.java:234)
	at test.LListTestNGParamet.test_DelStart_0(LListTestNGParamet.java:844)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_0 -->
        <test-method status="PASS" signature="test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_1 -->
        <test-method status="PASS" signature="test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_1 -->
        <test-method status="PASS" signature="test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_1 -->
        <test-method status="PASS" signature="test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_1 -->
        <test-method status="PASS" signature="test_DelStart_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_1 -->
        <test-method status="PASS" signature="test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" duration-ms="2" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_2 -->
        <test-method status="PASS" signature="test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_2 -->
        <test-method status="PASS" signature="test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_2 -->
        <test-method status="PASS" signature="test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_2 -->
        <test-method status="PASS" signature="test_DelStart_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_2 -->
        <test-method status="PASS" signature="test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_many -->
        <test-method status="PASS" signature="test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_many -->
        <test-method status="PASS" signature="test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_many -->
        <test-method status="PASS" signature="test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_many -->
        <test-method status="PASS" signature="test_DelStart_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_DelStart_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_DelStart_many -->
        <test-method status="PASS" signature="test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.get(AList0.java:188)
	at test.LListTestNGParamet.test_Get_0(LListTestNGParamet.java:635)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_0 -->
        <test-method status="PASS" signature="test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.get(AList1.java:177)
	at test.LListTestNGParamet.test_Get_0(LListTestNGParamet.java:635)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_0 -->
        <test-method status="PASS" signature="test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.get(AList2.java:80)
	at test.LListTestNGParamet.test_Get_0(LListTestNGParamet.java:635)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_0 -->
        <test-method status="PASS" signature="test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.get(LList1.java:100)
	at test.LListTestNGParamet.test_Get_0(LListTestNGParamet.java:635)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_0 -->
        <test-method status="PASS" signature="test_Get_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_0" duration-ms="3" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.get(LList2.java:89)
	at test.LListTestNGParamet.test_Get_0(LListTestNGParamet.java:635)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_0 -->
        <test-method status="PASS" signature="test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_1 -->
        <test-method status="PASS" signature="test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_1 -->
        <test-method status="PASS" signature="test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_1 -->
        <test-method status="PASS" signature="test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_1 -->
        <test-method status="PASS" signature="test_Get_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_1 -->
        <test-method status="PASS" signature="test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_2 -->
        <test-method status="PASS" signature="test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_2 -->
        <test-method status="PASS" signature="test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_2 -->
        <test-method status="PASS" signature="test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_2 -->
        <test-method status="PASS" signature="test_Get_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_2 -->
        <test-method status="PASS" signature="test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_many -->
        <test-method status="PASS" signature="test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_many -->
        <test-method status="PASS" signature="test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_many -->
        <test-method status="PASS" signature="test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_many -->
        <test-method status="PASS" signature="test_Get_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Get_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Get_many -->
        <test-method status="PASS" signature="test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_0 -->
        <test-method status="PASS" signature="test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_0 -->
        <test-method status="PASS" signature="test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_0 -->
        <test-method status="PASS" signature="test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_0 -->
        <test-method status="PASS" signature="test_Iterator_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_0 -->
        <test-method status="PASS" signature="test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_1 -->
        <test-method status="PASS" signature="test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_1 -->
        <test-method status="PASS" signature="test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_1 -->
        <test-method status="PASS" signature="test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_1 -->
        <test-method status="PASS" signature="test_Iterator_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_1 -->
        <test-method status="PASS" signature="test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_2 -->
        <test-method status="PASS" signature="test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_2 -->
        <test-method status="PASS" signature="test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_2 -->
        <test-method status="PASS" signature="test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_2 -->
        <test-method status="PASS" signature="test_Iterator_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_2 -->
        <test-method status="PASS" signature="test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_many -->
        <test-method status="PASS" signature="test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_many -->
        <test-method status="PASS" signature="test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_many -->
        <test-method status="PASS" signature="test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_many -->
        <test-method status="PASS" signature="test_Iterator_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Iterator_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Iterator_many -->
        <test-method status="PASS" signature="test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.maxPos(AList0.java:144)
	at test.LListTestNGParamet.test_MaxPos_0(LListTestNGParamet.java:517)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_0 -->
        <test-method status="PASS" signature="test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.maxPos(AList1.java:134)
	at test.LListTestNGParamet.test_MaxPos_0(LListTestNGParamet.java:517)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_0 -->
        <test-method status="PASS" signature="test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.maxPos(AList2.java:131)
	at test.LListTestNGParamet.test_MaxPos_0(LListTestNGParamet.java:517)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_0 -->
        <test-method status="PASS" signature="test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.maxPos(LList2.java:164)
	at test.LListTestNGParamet.test_MaxPos_0(LListTestNGParamet.java:517)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_0 -->
        <test-method status="PASS" signature="test_MaxPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.maxPos(LList1.java:175)
	at test.LListTestNGParamet.test_MaxPos_0(LListTestNGParamet.java:517)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_0 -->
        <test-method status="PASS" signature="test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" duration-ms="5" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_1 -->
        <test-method status="PASS" signature="test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_1 -->
        <test-method status="PASS" signature="test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_1 -->
        <test-method status="PASS" signature="test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_1 -->
        <test-method status="PASS" signature="test_MaxPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_1 -->
        <test-method status="PASS" signature="test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" duration-ms="3" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_2 -->
        <test-method status="PASS" signature="test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_2 -->
        <test-method status="PASS" signature="test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_2 -->
        <test-method status="PASS" signature="test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_2 -->
        <test-method status="PASS" signature="test_MaxPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_2 -->
        <test-method status="PASS" signature="test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_many -->
        <test-method status="PASS" signature="test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_many -->
        <test-method status="PASS" signature="test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_many -->
        <test-method status="PASS" signature="test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_many -->
        <test-method status="PASS" signature="test_MaxPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MaxPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MaxPos_many -->
        <test-method status="PASS" signature="test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.maxPos(AList0.java:144)
	at Lister.AList0.max(AList0.java:120)
	at test.LListTestNGParamet.test_Max_0(LListTestNGParamet.java:447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_0 -->
        <test-method status="PASS" signature="test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.maxPos(AList1.java:134)
	at Lister.AList1.max(AList1.java:109)
	at test.LListTestNGParamet.test_Max_0(LListTestNGParamet.java:447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_0 -->
        <test-method status="PASS" signature="test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.maxPos(AList2.java:131)
	at Lister.AList2.max(AList2.java:105)
	at test.LListTestNGParamet.test_Max_0(LListTestNGParamet.java:447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_0 -->
        <test-method status="PASS" signature="test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.maxPos(LList1.java:175)
	at Lister.LList1.max(LList1.java:141)
	at test.LListTestNGParamet.test_Max_0(LListTestNGParamet.java:447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_0 -->
        <test-method status="PASS" signature="test_Max_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.maxPos(LList2.java:164)
	at Lister.LList2.max(LList2.java:130)
	at test.LListTestNGParamet.test_Max_0(LListTestNGParamet.java:447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_0 -->
        <test-method status="PASS" signature="test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_1 -->
        <test-method status="PASS" signature="test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_1 -->
        <test-method status="PASS" signature="test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_1 -->
        <test-method status="PASS" signature="test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_1 -->
        <test-method status="PASS" signature="test_Max_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_1 -->
        <test-method status="PASS" signature="test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_2 -->
        <test-method status="PASS" signature="test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_2 -->
        <test-method status="PASS" signature="test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_2 -->
        <test-method status="PASS" signature="test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_2 -->
        <test-method status="PASS" signature="test_Max_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_2 -->
        <test-method status="PASS" signature="test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_many -->
        <test-method status="PASS" signature="test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_many -->
        <test-method status="PASS" signature="test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_many -->
        <test-method status="PASS" signature="test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_many -->
        <test-method status="PASS" signature="test_Max_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Max_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Max_many -->
        <test-method status="PASS" signature="test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.minPos(AList1.java:117)
	at test.LListTestNGParamet.test_MinPos_0(LListTestNGParamet.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_0 -->
        <test-method status="PASS" signature="test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.minPos(AList0.java:127)
	at test.LListTestNGParamet.test_MinPos_0(LListTestNGParamet.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_0 -->
        <test-method status="PASS" signature="test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.minPos(AList2.java:113)
	at test.LListTestNGParamet.test_MinPos_0(LListTestNGParamet.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_0 -->
        <test-method status="PASS" signature="test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.minPos(LList1.java:153)
	at test.LListTestNGParamet.test_MinPos_0(LListTestNGParamet.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_0 -->
        <test-method status="PASS" signature="test_MinPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_0" duration-ms="3" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.minPos(LList2.java:142)
	at test.LListTestNGParamet.test_MinPos_0(LListTestNGParamet.java:485)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_0 -->
        <test-method status="PASS" signature="test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_1 -->
        <test-method status="PASS" signature="test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_1 -->
        <test-method status="PASS" signature="test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" duration-ms="6" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_1 -->
        <test-method status="PASS" signature="test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_1 -->
        <test-method status="PASS" signature="test_MinPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_1 -->
        <test-method status="PASS" signature="test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_2 -->
        <test-method status="PASS" signature="test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_2 -->
        <test-method status="PASS" signature="test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_2 -->
        <test-method status="PASS" signature="test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_2 -->
        <test-method status="PASS" signature="test_MinPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_2 -->
        <test-method status="PASS" signature="test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.minPos(AList0.java:127)
	at test.LListTestNGParamet.test_MinPos_Ex(LListTestNGParamet.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_Ex -->
        <test-method status="PASS" signature="test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.minPos(AList1.java:117)
	at test.LListTestNGParamet.test_MinPos_Ex(LListTestNGParamet.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_Ex -->
        <test-method status="PASS" signature="test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.minPos(AList2.java:113)
	at test.LListTestNGParamet.test_MinPos_Ex(LListTestNGParamet.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_Ex -->
        <test-method status="PASS" signature="test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.minPos(LList2.java:142)
	at test.LListTestNGParamet.test_MinPos_Ex(LListTestNGParamet.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_Ex -->
        <test-method status="PASS" signature="test_MinPos_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.minPos(LList1.java:153)
	at test.LListTestNGParamet.test_MinPos_Ex(LListTestNGParamet.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_Ex -->
        <test-method status="PASS" signature="test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_many -->
        <test-method status="PASS" signature="test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_many -->
        <test-method status="PASS" signature="test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_many -->
        <test-method status="PASS" signature="test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_many -->
        <test-method status="PASS" signature="test_MinPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_MinPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_MinPos_many -->
        <test-method status="PASS" signature="test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.minPos(AList0.java:127)
	at Lister.AList0.min(AList0.java:114)
	at test.LListTestNGParamet.test_Min_0(LListTestNGParamet.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_0 -->
        <test-method status="PASS" signature="test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.minPos(AList1.java:117)
	at Lister.AList1.min(AList1.java:104)
	at test.LListTestNGParamet.test_Min_0(LListTestNGParamet.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_0 -->
        <test-method status="PASS" signature="test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.minPos(AList2.java:113)
	at Lister.AList2.min(AList2.java:98)
	at test.LListTestNGParamet.test_Min_0(LListTestNGParamet.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_0 -->
        <test-method status="PASS" signature="test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.minPos(LList1.java:153)
	at Lister.LList1.min(LList1.java:130)
	at test.LListTestNGParamet.test_Min_0(LListTestNGParamet.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_0 -->
        <test-method status="PASS" signature="test_Min_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.minPos(LList2.java:142)
	at Lister.LList2.min(LList2.java:119)
	at test.LListTestNGParamet.test_Min_0(LListTestNGParamet.java:415)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_0 -->
        <test-method status="PASS" signature="test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_1 -->
        <test-method status="PASS" signature="test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_1 -->
        <test-method status="PASS" signature="test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_1 -->
        <test-method status="PASS" signature="test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_1 -->
        <test-method status="PASS" signature="test_Min_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_1 -->
        <test-method status="PASS" signature="test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_2 -->
        <test-method status="PASS" signature="test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_2 -->
        <test-method status="PASS" signature="test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_2 -->
        <test-method status="PASS" signature="test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_2 -->
        <test-method status="PASS" signature="test_Min_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[77,11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_2 -->
        <test-method status="PASS" signature="test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.minPos(AList0.java:127)
	at Lister.AList0.min(AList0.java:114)
	at test.LListTestNGParamet.test_Min_Ex(LListTestNGParamet.java:408)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_Ex -->
        <test-method status="PASS" signature="test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.minPos(AList1.java:117)
	at Lister.AList1.min(AList1.java:104)
	at test.LListTestNGParamet.test_Min_Ex(LListTestNGParamet.java:408)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_Ex -->
        <test-method status="PASS" signature="test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.minPos(AList2.java:113)
	at Lister.AList2.min(AList2.java:98)
	at test.LListTestNGParamet.test_Min_Ex(LListTestNGParamet.java:408)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_Ex -->
        <test-method status="PASS" signature="test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.minPos(LList1.java:153)
	at Lister.LList1.min(LList1.java:130)
	at test.LListTestNGParamet.test_Min_Ex(LListTestNGParamet.java:408)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_Ex -->
        <test-method status="PASS" signature="test_Min_Ex(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_Ex" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.minPos(LList2.java:142)
	at Lister.LList2.min(LList2.java:119)
	at test.LListTestNGParamet.test_Min_Ex(LListTestNGParamet.java:408)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_Ex -->
        <test-method status="PASS" signature="test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,20,77,10,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_many -->
        <test-method status="PASS" signature="test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,20,77,10,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_many -->
        <test-method status="PASS" signature="test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,20,77,10,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_many -->
        <test-method status="PASS" signature="test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,20,77,10,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_many -->
        <test-method status="PASS" signature="test_Min_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Min_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,20,77,10,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Min_many -->
        <test-method status="PASS" signature="test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_0 -->
        <test-method status="PASS" signature="test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_0 -->
        <test-method status="PASS" signature="test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_0 -->
        <test-method status="PASS" signature="test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_0 -->
        <test-method status="PASS" signature="test_Revers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_0 -->
        <test-method status="PASS" signature="test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_1 -->
        <test-method status="PASS" signature="test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_1 -->
        <test-method status="PASS" signature="test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_1 -->
        <test-method status="PASS" signature="test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_1 -->
        <test-method status="PASS" signature="test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_2 -->
        <test-method status="PASS" signature="test_Revers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_1 -->
        <test-method status="PASS" signature="test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_2 -->
        <test-method status="PASS" signature="test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_2 -->
        <test-method status="PASS" signature="test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_2 -->
        <test-method status="PASS" signature="test_Revers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_2 -->
        <test-method status="PASS" signature="test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82,24,11,77,20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_many -->
        <test-method status="PASS" signature="test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82,24,11,77,20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_many -->
        <test-method status="PASS" signature="test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82,24,11,77,20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_many -->
        <test-method status="PASS" signature="test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82,24,11,77,20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_many -->
        <test-method status="PASS" signature="test_Revers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Revers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[82,24,11,77,20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Revers_many -->
        <test-method status="PASS" signature="test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList1.set(AList1.java:186)
	at test.LListTestNGParamet.test_Set_0(LListTestNGParamet.java:666)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_0 -->
        <test-method status="PASS" signature="test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList0.set(AList0.java:197)
	at test.LListTestNGParamet.test_Set_0(LListTestNGParamet.java:666)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_0 -->
        <test-method status="PASS" signature="test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" duration-ms="2" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.AList2.set(AList2.java:90)
	at test.LListTestNGParamet.test_Set_0(LListTestNGParamet.java:666)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_0 -->
        <test-method status="PASS" signature="test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList1.set(LList1.java:116)
	at test.LListTestNGParamet.test_Set_0(LListTestNGParamet.java:666)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_0 -->
        <test-method status="PASS" signature="test_Set_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at Lister.LList2.set(LList2.java:105)
	at test.LListTestNGParamet.test_Set_0(LListTestNGParamet.java:666)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_0 -->
        <test-method status="PASS" signature="test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_1 -->
        <test-method status="PASS" signature="test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_1 -->
        <test-method status="PASS" signature="test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_1 -->
        <test-method status="PASS" signature="test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_1 -->
        <test-method status="PASS" signature="test_Set_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_1 -->
        <test-method status="PASS" signature="test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_2 -->
        <test-method status="PASS" signature="test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_2 -->
        <test-method status="PASS" signature="test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_2 -->
        <test-method status="PASS" signature="test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_2 -->
        <test-method status="PASS" signature="test_Set_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_2 -->
        <test-method status="PASS" signature="test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_many -->
        <test-method status="PASS" signature="test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_many -->
        <test-method status="PASS" signature="test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_many -->
        <test-method status="PASS" signature="test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_many -->
        <test-method status="PASS" signature="test_Set_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Set_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Set_many -->
        <test-method status="PASS" signature="test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_0 -->
        <test-method status="PASS" signature="test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_0 -->
        <test-method status="PASS" signature="test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_0 -->
        <test-method status="PASS" signature="test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_0 -->
        <test-method status="PASS" signature="test_Size_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_0 -->
        <test-method status="PASS" signature="test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_1 -->
        <test-method status="PASS" signature="test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_1 -->
        <test-method status="PASS" signature="test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_1 -->
        <test-method status="PASS" signature="test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_1 -->
        <test-method status="PASS" signature="test_Size_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_1 -->
        <test-method status="PASS" signature="test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_2 -->
        <test-method status="PASS" signature="test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_2 -->
        <test-method status="PASS" signature="test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_2 -->
        <test-method status="PASS" signature="test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_2 -->
        <test-method status="PASS" signature="test_Size_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_2 -->
        <test-method status="PASS" signature="test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_many -->
        <test-method status="PASS" signature="test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_many -->
        <test-method status="PASS" signature="test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_many -->
        <test-method status="PASS" signature="test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_many -->
        <test-method status="PASS" signature="test_Size_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_many" duration-ms="2" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_many -->
        <test-method status="PASS" signature="test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_null -->
        <test-method status="PASS" signature="test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_null -->
        <test-method status="PASS" signature="test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_null -->
        <test-method status="PASS" signature="test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_null -->
        <test-method status="PASS" signature="test_Size_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Size_null" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Size_null -->
        <test-method status="PASS" signature="test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_0 -->
        <test-method status="PASS" signature="test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_0 -->
        <test-method status="PASS" signature="test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_0 -->
        <test-method status="PASS" signature="test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_0 -->
        <test-method status="PASS" signature="test_Sort_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_0 -->
        <test-method status="PASS" signature="test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_1 -->
        <test-method status="PASS" signature="test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_1 -->
        <test-method status="PASS" signature="test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_1 -->
        <test-method status="PASS" signature="test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_1 -->
        <test-method status="PASS" signature="test_Sort_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_1 -->
        <test-method status="PASS" signature="test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" duration-ms="3" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_2 -->
        <test-method status="PASS" signature="test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_2 -->
        <test-method status="PASS" signature="test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_2 -->
        <test-method status="PASS" signature="test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_2 -->
        <test-method status="PASS" signature="test_Sort_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_2 -->
        <test-method status="PASS" signature="test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,11,20,24,77,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_many -->
        <test-method status="PASS" signature="test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,11,20,24,77,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_many -->
        <test-method status="PASS" signature="test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,11,20,24,77,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_many -->
        <test-method status="PASS" signature="test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,11,20,24,77,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_many -->
        <test-method status="PASS" signature="test_Sort_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_Sort_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,11,20,24,77,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Sort_many -->
        <test-method status="PASS" signature="test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_0 -->
        <test-method status="PASS" signature="test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_0 -->
        <test-method status="PASS" signature="test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" duration-ms="6" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_0 -->
        <test-method status="PASS" signature="test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_0 -->
        <test-method status="PASS" signature="test_ToString_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_0 -->
        <test-method status="PASS" signature="test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_1 -->
        <test-method status="PASS" signature="test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_1 -->
        <test-method status="PASS" signature="test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" duration-ms="5" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_1 -->
        <test-method status="PASS" signature="test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_1 -->
        <test-method status="PASS" signature="test_ToString_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_1 -->
        <test-method status="PASS" signature="test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_2 -->
        <test-method status="PASS" signature="test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_2 -->
        <test-method status="PASS" signature="test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_2 -->
        <test-method status="PASS" signature="test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_2 -->
        <test-method status="PASS" signature="test_ToString_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_2 -->
        <test-method status="PASS" signature="test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_many -->
        <test-method status="PASS" signature="test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_many -->
        <test-method status="PASS" signature="test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_many -->
        <test-method status="PASS" signature="test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_many -->
        <test-method status="PASS" signature="test_ToString_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_ToString_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_ToString_many -->
        <test-method status="PASS" signature="test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" duration-ms="8" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_0 -->
        <test-method status="PASS" signature="test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_1 -->
        <test-method status="PASS" signature="test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,33,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_2 -->
        <test-method status="PASS" signature="test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,55,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many -->
        <test-method status="PASS" signature="test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,55,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many_end -->
        <test-method status="PASS" signature="test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,55,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many_end -->
        <test-method status="PASS" signature="test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,55,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many_end -->
        <test-method status="PASS" signature="test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,55,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many_end -->
        <test-method status="PASS" signature="test_addPos_many_end(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_addPos_many_end" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,55,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_addPos_many_end -->
        <test-method status="PASS" signature="test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_0 -->
        <test-method status="PASS" signature="test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_0 -->
        <test-method status="PASS" signature="test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_0 -->
        <test-method status="PASS" signature="test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_0 -->
        <test-method status="PASS" signature="test_halfRevers_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_0 -->
        <test-method status="PASS" signature="test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_1 -->
        <test-method status="PASS" signature="test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_1 -->
        <test-method status="FAIL" signature="test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[array lengths differed, expected.length=1 actual.length=0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: array lengths differed, expected.length=1 actual.length=0
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.internal.junit.ComparisonCriteria.assertArraysAreSameLength(ComparisonCriteria.java:70)
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:34)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNGParamet.test_halfRevers_1(LListTestNGParamet.java:605)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_1 -->
        <test-method status="PASS" signature="test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_1 -->
        <test-method status="PASS" signature="test_halfRevers_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_1" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_1 -->
        <test-method status="PASS" signature="test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_2 -->
        <test-method status="PASS" signature="test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_2 -->
        <test-method status="PASS" signature="test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20,10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_2 -->
        <test-method status="FAIL" signature="test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[array lengths differed, expected.length=2 actual.length=0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: array lengths differed, expected.length=2 actual.length=0
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.internal.junit.ComparisonCriteria.assertArraysAreSameLength(ComparisonCriteria.java:70)
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:34)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNGParamet.test_halfRevers_2(LListTestNGParamet.java:615)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_2 -->
        <test-method status="FAIL" signature="test_halfRevers_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_2" duration-ms="13" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.junit.ArrayComparisonFailure">
            <message>
              <![CDATA[arrays first differed at element [0]; expected:<20> but was:<10>]]>
            </message>
            <full-stacktrace>
              <![CDATA[arrays first differed at element [0]; expected:<20> but was:<10>
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:52)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNGParamet.test_halfRevers_2(LListTestNGParamet.java:615)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.junit.ArrayComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_2 -->
        <test-method status="PASS" signature="test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,24,82,10,20,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_many -->
        <test-method status="PASS" signature="test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,24,82,10,20,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_many -->
        <test-method status="PASS" signature="test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" duration-ms="3" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11,24,82,10,20,77]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_many -->
        <test-method status="FAIL" signature="test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[array lengths differed, expected.length=6 actual.length=0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: array lengths differed, expected.length=6 actual.length=0
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.internal.junit.ComparisonCriteria.assertArraysAreSameLength(ComparisonCriteria.java:70)
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:34)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNGParamet.test_halfRevers_many(LListTestNGParamet.java:625)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_many -->
        <test-method status="FAIL" signature="test_halfRevers_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_halfRevers_many" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.internal.junit.ArrayComparisonFailure">
            <message>
              <![CDATA[arrays first differed at element [0]; expected:<11> but was:<10>]]>
            </message>
            <full-stacktrace>
              <![CDATA[arrays first differed at element [0]; expected:<11> but was:<10>
	at org.testng.internal.junit.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:52)
	at org.testng.internal.junit.ArrayAsserts.internalArrayEquals(ArrayAsserts.java:270)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:146)
	at org.testng.internal.junit.ArrayAsserts.assertArrayEquals(ArrayAsserts.java:159)
	at test.LListTestNGParamet.test_halfRevers_many(LListTestNGParamet.java:625)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:100)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:811)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1129)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:746)
	at org.testng.TestRunner.run(TestRunner.java:600)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1264)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1189)
	at org.testng.TestNG.runSuites(TestNG.java:1104)
	at org.testng.TestNG.run(TestNG.java:1076)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:152)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:57)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.junit.ArrayComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_halfRevers_many -->
        <test-method status="PASS" signature="test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" duration-ms="1" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_0" duration-ms="0" started-at="2016-07-29T17:36:36Z" data-provider="Lister" finished-at="2016-07-29T17:36:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_0 -->
        <test-method status="PASS" signature="test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_1 -->
        <test-method status="PASS" signature="test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_2 -->
        <test-method status="PASS" signature="test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_many -->
        <test-method status="PASS" signature="test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_init_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_init_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_init_null -->
        <test-method status="PASS" signature="test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_0(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_0" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_0 -->
        <test-method status="PASS" signature="test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_1(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_1" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_1 -->
        <test-method status="PASS" signature="test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_2(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_2" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_2 -->
        <test-method status="PASS" signature="test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" duration-ms="6" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,44]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,44]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,44]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" duration-ms="1" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,44]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_many(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_many" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10,20,77,11,24,82,44]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_many -->
        <test-method status="PASS" signature="test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
        <test-method status="PASS" signature="test_toArray_null(Lister.EList)[pri:0, instance:test.LListTestNGParamet@30a3107a]" name="test_toArray_null" duration-ms="0" started-at="2016-07-29T17:36:37Z" data-provider="Lister" finished-at="2016-07-29T17:36:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray_null -->
      </class> <!-- test.LListTestNGParamet -->
    </test> <!-- GRP-init,DelPos,set,halfRevers,max,addPos,clear,sort,addStart,revers,DelStart,addEnd,min,size,get,Iterator,toArray,minPos,DelEnd,toString,maxPos -->
  </suite> <!-- Lister2_Iterator by groups -->
</testng-results>
